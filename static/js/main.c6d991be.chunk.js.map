{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["style","hidden","display","enter","backgroundColor","paddingLeft","App","player","useState","loaded","setLoad","inputRef","useRef","onSelect","useCallback","videoJsOptions","width","document","body","offsetWidth","height","offsetHeight","autoplay","controls","sources","src","current","value","type","videojs","querySelector","console","log","dispose","className","rel","href","ref","onClick","data-vjs-player","id","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAsEA,IAAMA,EAAQ,CACZC,OAAQ,CACNC,QAAS,QAEXC,MAAO,CACLC,gBAAiB,QACjBC,YAAa,SAIFC,EA3Ef,WACE,IACIC,EAFS,EAIaC,oBAAS,GAJtB,mBAINC,EAJM,KAIEC,EAJF,KAKPC,EAAWC,mBACXC,EAAWC,uBAAY,WAC3BJ,GAAQ,GACR,IAAMK,EAAiB,CACrBC,MAAOC,SAASC,KAAKC,YACrBC,OAAQH,SAASC,KAAKG,aACtBC,UAAU,EACVC,UAAU,EACVC,QAAS,CACP,CACEC,IAAKd,EAASe,QAAUf,EAASe,QAAQC,MAAQ,GACjDC,KAAM,2BASZ,OAJArB,EAASsB,YAAQZ,SAASa,cAAc,SAAUf,GAAgB,WAChEgB,QAAQC,IAAI,qBAGP,WACDzB,GACFA,EAAO0B,aAGV,IAEH,OACE,yBAAKC,UAAU,OACb,0BACEC,IAAI,aACJC,KAAK,0EAEP,4BAAQX,IAAI,sEACZ,4BAAQA,IAAI,wEACZ,0BACEW,KAAK,4CACLD,IAAI,eAEN,4BAAQD,UAAU,cACfzB,EAAS,KACR,6BACE,6EACA,6BACA,2HACA,2BAAOT,MAAOA,EAAMG,MAAQyB,KAAK,OAAOS,IAAK1B,IAC7C,4BAAQX,MAAOA,EAAMG,MAAOmC,QAASzB,GAArC,6BAMJ,yBAAKb,MAAOS,EAAS,GAAKT,EAAMC,OAAQsC,mBAAA,GACtC,2BAAOC,GAAG,QAAQN,UAAU,iBCnDlBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c6d991be.chunk.js","sourcesContent":["import React, { useCallback, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport videojs, { VideoJsPlayer } from \"video.js\";\nimport { NONAME } from \"dns\";\n\nfunction App() {\n  let videoNode;\n  let player;\n\n  const [loaded, setLoad] = useState(false);\n  const inputRef = useRef();\n  const onSelect = useCallback(() => {\n    setLoad(true);\n    const videoJsOptions = {\n      width: document.body.offsetWidth,\n      height: document.body.offsetHeight,\n      autoplay: true,\n      controls: true,\n      sources: [\n        {\n          src: inputRef.current ? inputRef.current.value : \"\",\n          type: \"application/x-mpegURL\"\n        }\n      ]\n    };\n\n    player = videojs(document.querySelector(\"video\"), videoJsOptions, () => {\n      console.log(\"OnPlayer Ready\");\n    });\n\n    return () => {\n      if (player) {\n        player.dispose();\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\"\n      />\n      <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n      <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script>\n      <link\n        href=\"https://vjs.zencdn.net/7.4.1/video-js.css\" // FIXME cdnで良いのかどうかは検討する\n        rel=\"stylesheet\"\n      ></link>\n      <header className=\"App-header\">\n        {loaded ? null : (\n          <div>\n            <h1>HLS動画プレイヤー</h1>\n            <br/>\n            <h5>m3u8ファイルのURLを入力してください</h5>\n            <input style={style.enter}  type=\"text\" ref={inputRef} />\n            <button style={style.enter} onClick={onSelect}>\n              読み込み\n            </button>\n          </div>\n        )}\n\n        <div style={loaded ? {} : style.hidden} data-vjs-player>\n          <video id=\"video\" className=\"video-js\"></video>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nconst style = {\n  hidden: {\n    display: \"none\"\n  },\n  enter: {\n    backgroundColor: \"#1234\",\n    paddingLeft: \"10px\",\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}